//一个结构体类型
//struct Stu
//{
//	char name[20];	//字符串 用char类型
//	int age ;
//	char id[15];
//}s4,s5,s6;									//全局变量
//	struct Stu s3;							//全局变量
//
//	匿名结构体类型
//	struct 
//	{
//		char name[20];
//		int age;
//	} x;				//此处为匿名类型，需要在后面直接创造变量
//	struct 
//	{
//		char name[20];
//		int age;
//	}* px;	
//	px = &x;
//	计算机会将以上两种声明当做不同的类型，是会产生错误的（匿名情况下）
//int main()
//{
//	struct Stu s1;							//局部变量
//	struct Stu s2;							//局部变量
//
//	return 0;
//}
//
//结构体自引用
// struct Node 
// {
//	 int data;
//	 struct Node *next;			//结构体造一个同类型的结构体变量
// };
//    结构体创造需要用一个具体的内存空间，使用指针来找能够有具体的空间大小
//
// 结构体名称的简化
// typedef struct Node 
// {
//	 int data;
//	 struct Node *next;	
//  }Node;
//#include<stdio.h>
//struct S
//{
//	int b;
//	char a[20];
//};
//
//typedef struct Stu 
//{
//	struct S st;
//	char name[20];
//	char id[20];
//	int age;
//}Stu;
// int main()
// {
//	 Stu s1={{2,"hello bit"},"zhangsan","B2021020307",18};
//		 printf("%s\n",s1.id);
//		 printf("%s\n",s1.name);
//		 printf("%d\n",s1.age);
//		 printf("%s\n",s1.st.a);
//		 printf("%s\n",s1->
//	 return 0;
// }
//大小端存储
//int check_keys(int i)
//{
//	return (*(char *)&i);
//}
//int check_keys1()
//{
//	union U
//	{
//		char a;
//		int b;
//	}u;
//	u.b=3;
//return u.b;
//}
//int main()
//{
//	int a=3;
//	int ret =0;
//	ret=check_keys(a);
//	ret =check_keys1();
//	if(3 == ret)
//	{
//		printf("小端存储\n");
//	}
//	/*else
//	{
//		printf("大端存储\n");
//	}
//  return 0;
//}



//结构体内存对齐
//#include<stdio.h>
//编译器的默认对齐数可以改变
//改变默认对齐数
//#pragma pack(4)
//
//struct S
//{
//	char c1;
//	int a;
//	char c2;
//};
//struct S1
//{
//	char c1;
//	char c2;
//	int b;
//};
//struct S2
//{
//	char c3;
//	int a;
//	struct S1;
//};
//struct S3
//{
//	char c4;
//	double d;
//	char c5;
//};
//#pragma pack()
//取消设置的默认对齐数
//int main()
//{
//	struct S s1={0};
//	struct S1 s2={0};
//	struct S2 s3={0};
//	struct S3 s4 ={0};
//	printf("%d\n",sizeof(s4));
//	printf("%d\n",sizeof(s1));
//	printf("%d\n",sizeof(s2));
//	printf("%d\n",sizeof(s3));
//	return 0;
//}
//
